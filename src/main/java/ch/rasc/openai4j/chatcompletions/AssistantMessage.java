/*
 * Copyright the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package ch.rasc.openai4j.chatcompletions;

import java.util.ArrayList;
import java.util.List;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonProperty;

import ch.rasc.openai4j.chatcompletions.ChatCompletionResponse.Message;
import ch.rasc.openai4j.common.ToolCall;

@JsonInclude(Include.NON_EMPTY)
@SuppressWarnings({ "hiding" })
public class AssistantMessage extends ChatCompletionMessage {
	private final Object content;

	private final String name;

	private final String refusal;

	private final List<ToolCall> toolCalls;

	private final AudioAssistantMessage audio;

	@Deprecated
	private AssistantMessage(Object content, String name, String refusal,
			List<ToolCall> toolCalls, AudioAssistantMessage audio) {
		if (content == null) {
			throw new IllegalArgumentException("content must not be null");
		}
		this.content = content;
		this.name = name;
		this.refusal = refusal;
		if (toolCalls != null) {
			this.toolCalls = List.copyOf(toolCalls);
		}
		else {
			this.toolCalls = null;
		}
		this.audio = audio;
	}

	@SuppressWarnings("unchecked")
	private AssistantMessage(Builder builder) {
		if (builder.content == null) {
			throw new IllegalArgumentException("content must not be null");
		}

		if (builder.content instanceof List) {
			int refusalCount = 0;
			for (AssistantContent c : (List<AssistantContent>) builder.content) {
				if (c instanceof AssistantRefusalContent) {
					refusalCount++;
					if (refusalCount > 1) {
						throw new IllegalArgumentException(
								"Only one refusal content part is allowed");
					}
				}
			}
		}

		this.content = builder.content;
		this.name = builder.name;
		this.refusal = builder.refusal;
		this.toolCalls = builder.toolCalls;
		this.audio = builder.audio;
	}

	record AudioAssistantMessage(String id) {
		/**
		 * Unique identifier for a previous audio response from the model.
		 */
		@Override
		public String id() {
			return this.id;
		}
	}

	/**
	 * @deprecated Use builder instead
	 * <p>
	 * Create a new assistant message
	 *
	 * @param content The contents of the system message.
	 * @param name An optional name for the participant. Provides the model information to
	 * differentiate between participants of the same role.
	 * @param toolCalls The tool calls generated by the model, such as function calls.
	 */
	@Deprecated(since = "1.3.6", forRemoval = true)
	public static AssistantMessage of(String content, String name,
			List<ToolCall> toolCalls) {
		return new AssistantMessage(content, name, null, toolCalls, null);
	}

	/**
	 * @deprecated Use builder instead
	 * <p>
	 * Create a new assistant message
	 *
	 * @param content The contents of the system message.
	 * @param name An optional name for the participant. Provides the model information to
	 * differentiate between participants of the same role.
	 * @param refusal The refusal message by the assistant.
	 * @param toolCalls The tool calls generated by the model, such as function calls.
	 */
	@Deprecated(since = "1.3.6", forRemoval = true)
	public static AssistantMessage of(String content, String name, String refusal,
			List<ToolCall> toolCalls) {
		return new AssistantMessage(content, name, refusal, toolCalls, null);
	}

	/**
	 * @deprecated Use builder instead
	 * <p>
	 * Create a new assistant message
	 *
	 * @param content The contents of the system message.
	 */
	@Deprecated(since = "1.3.6", forRemoval = true)
	public static AssistantMessage of(String content) {
		return new AssistantMessage(content, null, null, null, null);
	}

	/**
	 * Create a new assistant message from a response message
	 *
	 * @param message The message from a chat completion response
	 */
	public static AssistantMessage of(Message message) {
		AssistantMessage.Builder builder = builder();

		builder.content(message.content());
		builder.refusal(message.refusal());
		builder.toolCalls(message.toolCalls());
		if (message.audio() != null) {
			builder.audio(message.audio().id());
		}

		return builder.build();
	}

	/**
	 * The contents of the assistant message.
	 */
	@JsonProperty
	@JsonInclude
	public Object content() {
		return this.content;
	}

	/**
	 * An optional name for the participant. Provides the model information to
	 * differentiate between participants of the same role.
	 */
	@JsonProperty
	public String name() {
		return this.name;
	}

	/**
	 * The refusal message by the assistant.
	 */
	@JsonProperty
	public String refusal() {
		return this.refusal;
	}

	/**
	 * The tool calls generated by the model, such as function calls.
	 */
	@JsonProperty("tool_calls")
	public List<ToolCall> toolCalls() {
		return this.toolCalls;
	}

	/**
	 * Data about a previous audio response from the model.
	 */
	public AudioAssistantMessage audio() {
		return this.audio;
	}

	/**
	 * The role of the messages author, in this case <code>assistant</code>.
	 */
	@Override
	String role() {
		return "assistant";
	}

	public interface AssistantContent {
	}

	/**
	 * Represents text content implementing the {@link AssistantContent} interface.
	 */
	public static class AssistantTextContent implements AssistantContent {
		private final String type;

		private final String text;

		private AssistantTextContent(String type, String text) {
			if (type == null) {
				throw new IllegalArgumentException("type cannot be null");
			}
			if (text == null) {
				throw new IllegalArgumentException("text cannot be null");
			}
			this.type = type;
			this.text = text;
		}

		/**
		 * Creates a new TextContent instance with the specified text.
		 *
		 * @param text The text content.
		 * @return A new TextContent instance.
		 */
		public static AssistantTextContent of(String text) {
			return new AssistantTextContent("text", text);
		}

		/**
		 * The text content.
		 */
		@JsonProperty
		public String text() {
			return this.text;
		}

		/**
		 * The type of the content part. Always <code>text</code>.
		 */
		@JsonProperty
		public String type() {
			return this.type;
		}
	}

	/**
	 * Represents refusal content implementing the {@link AssistantContent} interface.
	 */
	public static class AssistantRefusalContent implements AssistantContent {
		private final String type;

		private final String refusal;

		private AssistantRefusalContent(String type, String refusal) {
			if (type == null) {
				throw new IllegalArgumentException("type cannot be null");
			}
			if (refusal == null) {
				throw new IllegalArgumentException("refusal cannot be null");
			}
			this.type = type;
			this.refusal = refusal;
		}

		/**
		 * Creates a new RefusalContent instance with the specified refusal message.
		 *
		 * @param refusal The refusal message.
		 * @return A new RefusalContent instance.
		 */
		public static AssistantRefusalContent of(String refusal) {
			return new AssistantRefusalContent("refusal", refusal);
		}

		/**
		 * The refusal message generated by the model.
		 */
		@JsonProperty
		public String refusal() {
			return this.refusal;
		}

		/**
		 * The type of the content part. Always <code>refusal</code>.
		 */
		@JsonProperty
		public String type() {
			return this.type;
		}
	}

	public static Builder builder() {
		return new Builder();
	}

	public static final class Builder {
		private Object content;
		private String name;
		private String refusal;
		private List<ToolCall> toolCalls;
		private AudioAssistantMessage audio;

		private Builder() {
		}

		/**
		 * The contents of the assistant message.
		 */
		public Builder content(String content) {
			this.content = content;
			return this;
		}

		/**
		 * The contents of the assistant message.
		 */
		public Builder content(List<AssistantContent> content) {
			if (content != null) {
				this.content = new ArrayList<>(content);
			}
			return this;
		}

		/**
		 * Add a text content part to the assistant message.
		 */
		@SuppressWarnings("unchecked")
		public Builder addText(String... text) {
			if (text != null && text.length > 0) {
				if (this.content == null) {
					this.content = new ArrayList<>();
				}
				if (this.content instanceof String) {
					throw new IllegalStateException(
							"Cannot add text content part to a string content");
				}
				for (String t : text) {
					((List<AssistantContent>) this.content)
							.add(AssistantTextContent.of(t));
				}
			}
			return this;
		}

		/**
		 * Add a refusal content part to the assistant message.
		 */
		@SuppressWarnings("unchecked")
		public Builder addRefusal(String refusal) {
			if (this.content == null) {
				this.content = new ArrayList<>();
			}
			if (this.content instanceof String) {
				throw new IllegalStateException(
						"Cannot add refusal content part to a string content");
			}
			((List<AssistantContent>) this.content)
					.add(AssistantRefusalContent.of(refusal));
			return this;
		}

		/**
		 * An optional name for the participant. Provides the model information to
		 * differentiate between participants of the same role.
		 */
		public Builder name(String name) {
			this.name = name;
			return this;
		}

		/**
		 * The refusal message by the assistant.
		 */
		public Builder refusal(String refusal) {
			this.refusal = refusal;
			return this;
		}

		/**
		 * The tool calls generated by the model, such as function calls.
		 */
		public Builder toolCalls(List<ToolCall> toolCalls) {
			if (toolCalls != null) {
				this.toolCalls = new ArrayList<>(toolCalls);
			}
			return this;
		}

		/**
		 * Add tool calls generated by the model, such as function calls.
		 */
		public Builder addToolCalls(ToolCall... toolCalls) {
			if (toolCalls != null && toolCalls.length > 0) {
				if (this.toolCalls == null) {
					this.toolCalls = new ArrayList<>();
				}
				for (ToolCall toolCall : toolCalls) {
					this.toolCalls.add(toolCall);
				}
			}
			return this;
		}

		/**
		 * Data about a previous audio response from the model.
		 */
		public Builder audio(String id) {
			this.audio = new AudioAssistantMessage(id);
			return this;
		}

		public AssistantMessage build() {
			return new AssistantMessage(this);
		}
	}

}
